return {}
-- return {
--   -- OBSIDIAN VIM
--   "epwalsh/obsidian.nvim",
--   version = "*", -- recommended, use latest release instead of latest commit
--   lazy = true,
--   ft = "markdown",
--   dependencies = {
--     "nvim-lua/plenary.nvim",
--   },
--   opts = {
--     workspaces = {
--       {
--         name = "personal",
--         path = "~/documents/Notes/",
--       },
--       -- {
--       --   name = "work",
--       --   path = "~/vaults/work",
--       -- },
--     },
--     completion = {
--       nvim_cmp = true,
--       use_path_only = true,
--     },
--     mappings = {
--       -- Overrides the 'gf' mapping to work on markdown/wiki links within your vault.
--       ["gf"] = {
--         action = function()
--           return require("obsidian").util.gf_passthrough()
--         end,
--         opts = { noremap = false, expr = true, buffer = true },
--       },
--       -- Toggle check-boxes.
--       ["<leader>ch"] = {
--         action = function()
--           return require("obsidian").util.toggle_checkbox()
--         end,
--         opts = { buffer = true },
--       },
--     },
--     -- Optional, customize how names/IDs for new notes are created.
--     note_id_func = function(title)
--       -- Create note IDs in a Zettelkasten format with a timestamp and a suffix.
--       -- In this case a note with the title 'My new note' will given an ID that looks
--       -- like '1657296016-my-new-note', and therefore the file name '1657296016-my-new-note.md'
--       local suffix = ""
--       if title ~= nil then
--         -- If title is given, transform it into valid file name.
--         suffix = title:gsub(" ", "-"):gsub("[^A-Za-z0-9-]", ""):lower()
--       else
--         -- If title is nil, just add 4 random uppercase letters to the suffix.
--         for _ = 1, 4 do
--           suffix = suffix .. string.char(math.random(65, 90))
--         end
--       end
--       return tostring(os.time()) .. "-" .. suffix
--     end,
--     -- Optional, customize the backlinks interface.
--     backlinks = {
--       -- The default height of the backlinks pane.
--       height = 10,
--       -- Whether or not to wrap lines.
--       wrap = true,
--     },
--     -- Optional, by default when you use `:ObsidianFollowLink` on a link to an external
--     -- URL it will be ignored but you can customize this behavior here.
--     follow_url_func = function(url)
--       -- Open the URL in the default web browser.
--       --      vim.fn.jobstart({ "open", url }) -- Mac OS
--       vim.fn.jobstart({ "xdg-open", url }) -- linux
--     end,
--     open_app_foreground = true,
--     finder = "telescope.nvim",
--     -- Optional, sort search results by "path", "modified", "accessed", or "created".
--     -- The recommend value is "modified" and `true` for `sort_reversed`, which means, for example `:ObsidianQuickSwitch`
--     -- will show the notes sorted by latest modified time
--     sort_by = "modified",
--     sort_reversed = true,
--     -- Optional, determines whether to open notes in a horizontal split, a vertical split,
--     -- or replacing the current buffer (default)
--     -- Accepted values are "current", "hsplit" and "vsplit"
--     open_notes_in = "vsplit",
--
--     ui = {
--       enable = true, -- set to false to disable all additional syntax features
--       update_debounce = 200, -- update delay after a text change (in milliseconds)
--       -- Define how various check-boxes are displayed
--       checkboxes = {
--         -- NOTE: the 'char' value has to be a single character, and the highlight groups are defined below.
--         [" "] = { char = "󰄱", hl_group = "ObsidianTodo" },
--         ["x"] = { char = "", hl_group = "ObsidianDone" },
--         [">"] = { char = "", hl_group = "ObsidianRightArrow" },
--         ["~"] = { char = "󰰱", hl_group = "ObsidianTilde" },
--       },
--       external_link_icon = { char = "", hl_group = "ObsidianExtLinkIcon" },
--       -- Replace the above with this if you don't have a patched font:
--       -- external_link_icon = { char = "", hl_group = "ObsidianExtLinkIcon" },
--       reference_text = { hl_group = "ObsidianRefText" },
--       highlight_text = { hl_group = "ObsidianHighlightText" },
--       tags = { hl_group = "ObsidianTag" },
--       hl_groups = {
--         -- The options are passed directly to `vim.api.nvim_set_hl()`. See `:help nvim_set_hl`.
--         ObsidianTodo = { bold = true, fg = "#f78c6c" },
--         ObsidianDone = { bold = true, fg = "#89ddff" },
--         ObsidianRightArrow = { bold = true, fg = "#f78c6c" },
--         ObsidianTilde = { bold = true, fg = "#ff5370" },
--         ObsidianRefText = { underline = true, fg = "#c792ea" },
--         ObsidianExtLinkIcon = { fg = "#c792ea" },
--         ObsidianTag = { italic = true, fg = "#89ddff" },
--         ObsidianHighlightText = { bg = "#75662e" },
--       },
--       -- Specify how to handle attachments.
--       attachments = {
--         -- The default folder to place images in via `:ObsidianPasteImg`.
--         -- If this a relative path it will be interpreted as relative to the vault root.
--         -- You can always override this per image by passing a full path to the command instead of just a filename.
--         img_folder = "/home/sugam/Documents/Notes/", -- This is the default
--         -- A function that determines the text to insert in the note when pasting an image.
--         -- It takes two arguments, the `obsidian.Client` and a plenary `Path` to the image file.
--         -- The is the default implementation.
--         ---@param client obsidian.Client
--         ---@param path Path the absolute path to the image file
--         ---@return string
--         img_text_func = function(client, path)
--           local link_path
--           local vault_relative_path = client:vault_relative_path(path)
--           if vault_relative_path ~= nil then
--             -- Use relative path if the image is saved in the vault dir.
--             link_path = vault_relative_path
--           else
--             -- Otherwise use the absolute path.
--             link_path = tostring(path)
--           end
--           local display_name = vim.fs.basename(link_path)
--           return string.format("![%s](%s)", display_name, link_path)
--         end,
--       },
--       yaml_parser = "native",
--     },
--   },
-- }
